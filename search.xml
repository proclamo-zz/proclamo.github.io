<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[How to use crossfilter with react, alt and webpack]]></title>
      <url>http://proclamo.github.io/2015/11/12/how-to-use-crossfilter-with-react-alt-and-webpack/</url>
      <content type="html"><![CDATA[<p>I’ve made a simple experiment of how to combining <a href="http://square.github.io/crossfilter/" target="_blank" rel="external">crossfilter</a> and <a href="https://facebook.github.io/react/index.html" target="_blank" rel="external">React</a> in an <a href="https://facebook.github.io/flux/" target="_blank" rel="external">flux</a> environment with the help of <a href="http://alt.js.org/" target="_blank" rel="external">alt</a>, all of them builded with <a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>.</p>
<p>This experiment also ilustrates how to prepare a minimun and production ready setup for any react and flux project. The source code of project <a href="https://github.com/proclamo/crossreact" target="_blank" rel="external">is hosted in github</a>.</p>
<h2 id="The_experiment">The experiment</h2><p>You can view the experiment running <a href="http://bl.ocks.org/proclamo/371dcca64a217154c956" target="_blank" rel="external">in a block</a>.</p>
<p>I’ve charged a dataset of the <a href="http://opendata.bcn.cat/opendata/es/catalog" target="_blank" rel="external">public office Open Data from Barcelona</a> with urbanistic data of blocks city (<a href="http://opendata.bcn.cat/opendata/es/descarrega-fitxer?url=http%3a%2f%2fbismartopendata.blob.core.windows.net%2fopendata%2fopendata%2fmap_illa_0_opendata_map_illa.csv&amp;name=MAP_ILLA.csv" target="_blank" rel="external">the dataset</a> has around 5k rows of data).</p>
<p>As I wanted a simple example, with crossfilter I only grouped by district and counted the total population for each district.</p>
<h2 id="React_and_Flux">React and Flux</h2><p>With alt, the flux architecture is very easy. You don’t have to think in the dispatcher component. You only have to write:</p>
<ul>
<li>an actions component</li>
<li>a store component</li>
<li>a react’s component who listens any changes from the store and fires events to the actions component</li>
</ul>
<p>The react component:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">var React = require('react');</span><br><span class="line">var AppActions = require('../actions/AppActions');</span><br><span class="line">var AppStore = require('../stores/AppStore');</span><br><span class="line"></span><br><span class="line">var AppComponent = React.createClass(&#123;</span><br><span class="line"></span><br><span class="line">  getInitialState: function() &#123;</span><br><span class="line">    return AppStore.getState();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentDidMount: function() &#123;</span><br><span class="line">    AppStore.listen(this.<span class="keyword">on</span>Change);</span><br><span class="line"></span><br><span class="line">    AppActions.init();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  componentWillUnmount: function() &#123;</span><br><span class="line">    AppStore.unlisten(this.<span class="keyword">on</span>Change);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">on</span>Change: function(<span class="keyword">state</span>) &#123;</span><br><span class="line">    this.<span class="built_in">set</span>State(<span class="keyword">state</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  update: function(el) &#123;</span><br><span class="line">    AppActions.update(el.target.value);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render: function() &#123;</span><br><span class="line"></span><br><span class="line">    var districts = this.<span class="keyword">state</span>.districts.map(function(item) &#123;</span><br><span class="line">      return <span class="variable">&lt;option key=&#123;item.key&#125; value=&#123;item.key&#125;&gt;</span>District &#123;item.key&#125; (&#123;item.value&#125; blocks)<span class="variable">&lt;/option&gt;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      <span class="variable">&lt;div&gt;</span></span><br><span class="line">        <span class="variable">&lt;div&gt;</span></span><br><span class="line">          <span class="variable">&lt;h1&gt;</span>Districts of Barcelona<span class="variable">&lt;/h1&gt;</span></span><br><span class="line">          <span class="variable">&lt;label&gt;</span>Disctrict<span class="variable">&lt;/label&gt;</span></span><br><span class="line">          <span class="variable">&lt;select onChange=&#123;this.update&#125;&gt;</span></span><br><span class="line">            <span class="variable">&lt;option value=""&gt;</span>Please, select a district<span class="variable">&lt;/option&gt;</span></span><br><span class="line">            &#123; districts &#125;</span><br><span class="line">          <span class="variable">&lt;/select&gt;</span></span><br><span class="line">        <span class="variable">&lt;/div&gt;</span></span><br><span class="line">        <span class="variable">&lt;div&gt;</span></span><br><span class="line">          <span class="variable">&lt;label&gt;</span>People: &#123; this.<span class="keyword">state</span>.people &#125;<span class="variable">&lt;/label&gt;</span></span><br><span class="line">        <span class="variable">&lt;/div&gt;</span></span><br><span class="line">      <span class="variable">&lt;/div&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = AppComponent;</span><br></pre></td></tr></table></figure>
<p>The AppComponent gets its initial state from the AppStore. When it did mount, it listens of changes in the store and calls to <code>this.onChange</code> who sets the internal state of the component. Once the internal state is changed the <code>render</code> method is fired and redraws the changes. Any change in the external state (the AppStore) is translated to the internal state component.</p>
<p>Any action we want to perform on the component will call to AppActions. We want two actions in this application: populate the initial select with the different districts, and then when we select any district we want view the numbe of people who lives in. The action for populate the select has to happen in the initial load of the component, this is why in the <code>componentDidMount</code> method we call to <code>AppActions.init()</code>method. </p>
<p>The AppActions is very simple:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alt = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AppActions = alt.createActions(&#123;</span><br><span class="line"></span><br><span class="line">  displayName: <span class="string">'AppActions'</span>,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatch();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dispatch(val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = AppActions;</span><br></pre></td></tr></table></figure></p>
<p>And the AppStore:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alt = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</span><br><span class="line"><span class="keyword">var</span> AppActions = <span class="built_in">require</span>(<span class="string">'../actions/AppActions'</span>);</span><br><span class="line"><span class="keyword">var</span> crossfilter = <span class="built_in">require</span>(<span class="string">'crossfilter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cross, byDistrict, groupByDistrict, people;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AppStore = alt.createStore(&#123;</span><br><span class="line"></span><br><span class="line">  displayName: <span class="string">'AppStore'</span>,</span><br><span class="line"></span><br><span class="line">  bindListeners: &#123;</span><br><span class="line">    init: AppActions.INIT,</span><br><span class="line">    update: AppActions.UPDATE</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  state: &#123;</span><br><span class="line">    districts: [],</span><br><span class="line">    people: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">require</span>(<span class="string">'dsv?delimiter=;!../../barcelona.csv'</span>); <span class="comment">// loaded via dsv-loader</span></span><br><span class="line"></span><br><span class="line">    data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">      d.HABITANTS = <span class="built_in">parseFloat</span>(d.HABITANTS);</span><br><span class="line">      d.NUM_VIVENDES = <span class="built_in">parseFloat</span>(d.NUM_VIVENDES);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    cross = crossfilter(data);</span><br><span class="line"></span><br><span class="line">    byDistrict = cross.dimension(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.NOM_DISTRICTE; &#125;);</span><br><span class="line"></span><br><span class="line">    groupByDistrict = byDistrict.group();</span><br><span class="line"></span><br><span class="line">    people = cross.dimension(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.HABITANTS; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> districts = groupByDistrict.top(<span class="literal">Infinity</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count = people.groupAll().reduceSum(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.HABITANTS; &#125;).value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      districts: districts,</span><br><span class="line">      people: count</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">district</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    byDistrict.filterAll();</span><br><span class="line">    people.filterAll();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (district) &#123;</span><br><span class="line">      byDistrict.filterExact(district);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count = people.groupAll().reduceSum(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d.HABITANTS; &#125;).value();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;     </span><br><span class="line">      people: count</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = AppStore;</span><br></pre></td></tr></table></figure></p>
<h3 id="Flux">Flux</h3><p>When <code>AppComponent</code> did mount calls to the <code>init</code> method of <code>AppActions</code>. The <code>AppStore</code> listens to <code>init</code> event from <code>AppActions</code> and executes its internal <code>init</code> method. This method reads the contents of CSV file and initiates the crossfilter engine.</p>
<p>Here are many questions to consider:</p>
<ul>
<li>the stores in alt are Singletons</li>
<li>we can think on node’s modules as a class with private variables and methods and a public side that we export in the <code>module.exports</code> action.</li>
</ul>
<p>This is why the crossfilter object is stored in the ‘private’ scope of the module and this is why we can use the same instance in more that one method. The store, as a singleton, never will lost the running instances, neither the crossfilter object, neither the state.</p>
<p>The <code>update</code> method of AppStore takes the crossfilter object, reset its filters and apply the new filters. Then, set its state with the new data, who fires the <code>onChange</code> method of AppComponent and causes the rendering of changes.</p>
<h2 id="Bonus:_Webpack">Bonus: Webpack</h2><p>The component architecture of React matches perfectly with the modular nature of webpack. This is the webpack configuration file for development:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebPackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bower_dir = path.resolve(__dirname, <span class="string">'bower_components'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;    </span><br><span class="line">    entry: [<span class="string">"webpack/hot/dev-server"</span>,<span class="string">"./app/main.js"</span>],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./build'</span>),</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebPackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'templates/dev/index.html'</span>,</span><br><span class="line">            inject: <span class="string">'body'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'styles'</span>, <span class="string">'styles.css'</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="module"><span class="keyword">module</span>: </span>&#123;</span><br><span class="line">        noParse: [],</span><br><span class="line">        loaders: [&#123; </span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">'jsx'</span> </span><br><span class="line">        &#125;, &#123; </span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            loader: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="module"><span class="keyword">module</span>.exports = config;</span></span><br></pre></td></tr></table></figure>
<p>There is two entry points, one for webpack-dev-server, who allows hot reloading when any changes is made in source code and refresh the browser. The other entry point is the main javascript file of application.</p>
<p>I have installed two loaders, the <a href="https://github.com/petehunt/jsx-loader" target="_blank" rel="external">jsx-loader</a> and the <a href="https://github.com/webpack/css-loader" target="_blank" rel="external">css-loader</a>. With jsx-loader webpacks is able to parse the <a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">JSX syntax</a> into valid javascript, and the css-loader is obvious. </p>
<p>I also have installed too a plugin, the <a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a> wich extracts the parsed files into a separated file. In this case, the css is not bundled inside the index.html, it is builded in the styles.css file.</p>
<p>I use the <a href="https://github.com/ampedandwired/html-webpack-plugin" target="_blank" rel="external">HtmlWebPackPlugin</a> for create the main html file with the links to css and javascript bundles.</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[Who I am?]]></title>
      <url>http://proclamo.github.io/about/index.html</url>
      <content type="html"><![CDATA[<p>My name is Cristian Martin Mouat, I am a developer from Spain. I could be classified as a full stack developer. I think in javascript, I do webs in PHP with Symfony and I work with Java.</p>
<p>After several years trying to create and market products, I have noticed that I have neglected my personal brand. I want to improve my english too, this is why I started this blog.</p>
<ul>
<li>My <a href="https://twitter.com/sevave" target="_blank" rel="external">twitter</a></li>
<li>My <a href="https://github.com/proclamo" target="_blank" rel="external">github</a></li>
<li>My <a href="http://bl.ocks.org/proclamo" target="_blank" rel="external">blocks</a></li>
</ul>
]]></content>
    </entry>
    
  
</search>
